Integration with Zope
=====================

We first setup zc.async to be able to do long upload or download tasks:

    >>> import transaction
    >>> import BTrees
    >>> import ZODB.FileStorage, ZODB.blob
    >>> from ZODB.DB import DB
    >>> import tempfile

    >>> import zc.async.configure
    >>> zc.async.configure.base()
    >>> import zc.async.queue
    >>> from zope.component import getGlobalSiteManager
    >>> getGlobalSiteManager().registerAdapter(zc.async.queue.getDefaultQueue)
    >>> blobdir = tempfile.mkdtemp()
    >>> storage = ZODB.blob.BlobStorage(blobdir, ZODB.FileStorage.FileStorage(
    ...     'zc_async.fs', create=True))
    >>> db = DB(storage)
    >>> conn = db.open()
    >>> root = conn.root()
    >>> PseudoZopeRoot = root['Application'] = BTrees.family32.OO.BTree()
    >>> transaction.commit()
    >>> def _getRootObject():
    ...     return PseudoZopeRoot
    ...
    >>> globals()['getRootFolder'] = _getRootObject
    >>> import zc.async.ftesting
    >>> zc.async.ftesting.setUp()
    >>> transaction.commit()


HeyWatch interface and adapter
------------------------------

The HeyWatch interface exposes the available features added to a video file:

>>> from aws.heywatch.interfaces import IHeyWatch
>>> IHeyWatch
<InterfaceClass aws.heywatch.interfaces.IHeyWatch>

To be able to retrieve an adapter or a heywatch view, we have a marker interface
to tag any object with heywatch capability:

>>> from aws.heywatch.interfaces import IHeyWatchable

Then we can create an arbitraty object and let it provide
this interface. As an example, we use an interface similar to
plone.app.blob.IATBlob:

>>> class Sample(object):
...     title = 'some title'
...     blob = 'some data'
...     __parent__ = None
...     __name__ = 'the_sample'

>>> from zope.interface import classImplements
>>> classImplements(Sample, IHeyWatchable)

We create an instance:

>>> mysample = Sample()

Now we have a IHeyWatch adapter on this object:
(we first register it)

>>> from aws.heywatch.adapters import heywatchfactory
>>> from zope.component import getGlobalSiteManager
>>> getGlobalSiteManager().registerAdapter(heywatchfactory)

We also have to register the standard annotations adapter
(normally done in ZCML)

>>> from zope.annotation.attribute import AttributeAnnotations
>>> getGlobalSiteManager().registerAdapter(AttributeAnnotations)

Now we can retrieve our adapter:

>>> IHeyWatch(mysample)
<aws.heywatch.adapters.HeyWatch object at ...>

The adapter is an annotation adapter that stores additional data:

>>> IHeyWatch(mysample).foobar = 'baz'
>>> print list(mysample.__annotations__.items())
[('aws.heywatch.adapters.HeyWatch', <aws.heywatch.adapters.HeyWatch object at ...>)]

Upload content provider
-----------------------

An upload content provider is included. It applies to container objects, any
views, and send data directly to HeyWatch.

>>> from aws.heywatch.views import DirectUpload
>>> from zope.publisher.browser import TestRequest, BrowserView

>>> anyrequest = TestRequest()
>>> anyview = BrowserView(mysample, anyrequest)

We call the view:

>>> uploadview= DirectUpload(mysample, anyrequest, anyview)
>>> uploadview.update()
>>> print uploadview.render()
    <form action="http://heywatch.com/upload" enctype="multipart/form-data"
method="post">
      <input type="hidden" value="..." name="key" />
      <input type="hidden" value="http://yoursite.com/upload_success.php" name="redirect_if_success" />
      <input type="hidden" value="http://yoursite.com/upload_error.php" name="redirect_if_error" />
      <input type="hidden" name="heywatch_video_id" value="the_sample" />
      <p>
        <input id="data" name="data" type="file" />
      </p>
      <p>
        <input name="commit" type="submit" value="Upload" />
      </p>
    </form>


Ping URL
--------

When data is transcoded, HeyWatch should call a specific URL that you have
configured in the HeyWatch admin panel. This URL should trigger the download
of both the original video and the transcoded video, and store them.

>>> from aws.heywatch.views import UploadPingHandler

We create a POST request with heywatch ping data

>>> pingrequest = TestRequest(
...                 heywatch_video_id='the_sample',
...                 form={
...                 'upload_id': 1554564},)

We call the ping view, which is contextless.

>>> response = UploadPingHandler(mysample, pingrequest)()
todo



clean up

    >>> zc.async.ftesting.tearDown()













